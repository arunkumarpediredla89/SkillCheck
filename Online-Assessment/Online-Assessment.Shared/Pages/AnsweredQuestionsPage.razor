
@page "/AnsweredQuestionsPage"
@using Model
@using PdfSharp
@using PdfSharp.Drawing
@using PdfSharp.Pdf
@using global::Services
@using static Online_Assessment.Shared.Pages.AssessmentPage
@inject NavigationManager NavigationManager
@inherits LayoutComponentBase
@inject IJSRuntime JSRuntime

<h3 class="heading">Result-Admin</h3>
<button class="addBtnClass" @onclick="GeneratePDF_File">Download</button>
<div class="user-info">
    <p><strong>User Name:</strong> John Doe</p>
    <p><strong>Email:</strong> john.doe@example.com</p>
    <p><strong>Score:</strong> 7/10</p>
</div>


<div class="questions-container">
    @foreach (var question in Questions)
    {
        <div class="question">
            <div class="question-text">
                <h4>Question @($"{Questions.IndexOf(question) + 1} of {Questions.Count}")</h4>
                <p>@question.QuestionText</p>
            </div>
            <div class="options">
                @foreach (var option in question.Options)
                {
                    <div class="option @(question.SelectedAnswer == option ? (question.SelectedAnswer == question.CorrectAnswer ? "correct" : "wrong") : (question.CorrectAnswer == option ? "correct" : ""))">
                        <label>
                            <input type="radio" name="option-@Questions.IndexOf(question)" value="@option" disabled="true" checked="@(question.SelectedAnswer == option)" />
                            @option
                        </label>
                    </div>
                }
            </div>
            <div class="feedback">
                @if (string.IsNullOrEmpty(question.SelectedAnswer))
                {
                    <span class="wrong">Not Attempted!</span>
                }
                else if (question.SelectedAnswer == question.CorrectAnswer)
                {
                    <span class="correct">Correct!</span>
                }
                else
                {
                    <span class="wrong">Wrong!</span>
                }
            </div>
        </div>
    }
</div>

<style>
    .correct {
    color: green;
    }

    .wrong {
    color: red;
    }
</style>

<style>
    .user-info {
    max-width: 800px;
    margin: 0 auto 20px;
    padding: 20px;
    background-color: #f9f9f9;
    using Model;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    text-align: center;
    using MigraDoc.DocumentObjectModel;
    }

    .user-info p {
    margin: 10px 0;
    font-size: 18px;
    }

    .user-info strong {
    color: #333;
    }
</style>

<style>
    .questions-container {
    max-width: 800px;
    margin: 0 auto;
    padding: 20px;
    background-color: #f9f9f9;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    .question {
    margin-bottom: 20px;
    padding: 15px;
    background-color: #fff;
    border-radius: 8px;
    box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);
    }

    .question-text {
    font-size: 18px;
    font-weight: bold;
    margin-bottom: 10px;
    }

    .options {
    margin-bottom: 10px;
    }

    .option {
    display: block;
    width: 100%;
    margin: 5px 0;
    padding: 10px;
    background-color: #f0f0f0;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    text-align: left;
    }

    .option:hover {
    background-color: #e0e0e0;
    }

    .feedback {
    font-weight: bold;
    margin-top: 10px;
    }

    .addBtnClass
    {
    justify-content: right;
    display: flex;
    }
</style>

    <script>
        window.saveAsFile = (filename, bytesBase64) => {
		var link = document.createElement('a');
		link.href = 'data:application/octet-stream;base64,' + bytesBase64;
		link.download = filename;
		document.body.appendChild(link);
		link.click();
		document.body.removeChild(link);
	};
    </script>

@code {
    private int CurrentQuestionIndex = 0;
    private bool IsLastQuestion => CurrentQuestionIndex == Questions.Count - 1;
    private bool IsFistQuestion => CurrentQuestionIndex == 0;
    private QuestionModel? CurrentQuestion => Questions[CurrentQuestionIndex];
    private List<QuestionModel> Questions = new()
    {
        new QuestionModel { QuestionText = "What is React Native?", Options = new List<string> { "A web framework", "A mobile app library", "A desktop tool", "A VCS" }, CorrectAnswer = "A mobile app library" },
        new QuestionModel { QuestionText = "Which language is used in React Native?", Options = new List<string> { "JavaScript", "Python", "Java", "Swift" }, CorrectAnswer = "JavaScript" },
        new QuestionModel { QuestionText = "Which core component creates a container?", Options = new List<string> { "View", "Container", "Div", "Frame" }, CorrectAnswer = "View" },
        new QuestionModel { QuestionText = "Which is NOT a valid React Native component?", Options = new List<string> { "Text", "Button", "Image", "Link" }, CorrectAnswer = "Link" },
        new QuestionModel { QuestionText = "Which component is used to render scrollable content?", Options = new List<string> { "FlatList", "ScrollView", "SectionList", "Text" }, CorrectAnswer = "ScrollView" },
        new QuestionModel { QuestionText = "Which file is the entry point?", Options = new List<string> { "App.js", "Index.js", "Main.js", "App.json" }, CorrectAnswer = "Index.js" },
        new QuestionModel { QuestionText = "Command to run a React Native app on Android?", Options = new List<string> { "react-native run-android", "react-native run-ios", "npm start", "npx react-native run-android" }, CorrectAnswer = "npx react-native run-android" },
        new QuestionModel { QuestionText = "Command to run React Native app in dev mode?", Options = new List<string> { "react-native run-android", "react-native run-ios", "npm start", "npx react-native run-ios" }, CorrectAnswer = "react-native run-android" },
        new QuestionModel { QuestionText = "Command to create a new React Native project?", Options = new List<string> { "react-native init", "npx create-react-native-app", "npm init react-native", "npx react-native init" }, CorrectAnswer = "npx react-native init" },
        new QuestionModel { QuestionText = "Command to install React Native CLI globally?", Options = new List<string> { "npm install -g react-native-cli", "npm install -g create-react-native-app", "npm install -g react-native", "npm install -g npx" }, CorrectAnswer = "npm install -g react-native-cli" }
    };

    private AdminModel user = new AdminModel(){
        Email="john@gmail.com",
        Comments="Good",
        Score="7",
        DifficultyLevel="Medium",
        Experience=2,
        Id=1,
    };
    
    private void CheckAnswer(QuestionModel question, string selectedOption)
    {
        question.SelectedAnswer = selectedOption;
    }

    // Sample correct and wrong answers for testing
    protected override void OnInitialized()
    {
        Questions[0].SelectedAnswer = "A mobile app library"; // Correct
        Questions[1].SelectedAnswer = "Python"; // Wrong
        Questions[2].SelectedAnswer = "View"; // Correct
        Questions[3].SelectedAnswer = "Link"; // Wrong
        Questions[4].SelectedAnswer = "ScrollView"; // Correct
        Questions[5].SelectedAnswer = "App.js"; // Wrong
        Questions[6].SelectedAnswer = "npx react-native run-android"; // Correct
        Questions[7].SelectedAnswer = "react-native run-android"; // Correct
        Questions[8].SelectedAnswer = "npx react-native init"; // Correct
        Questions[9].SelectedAnswer = "npm install -g react-native-cli"; // Correct
    }

    private async void download()
    {
        await GeneratePDF_File();
    }

 

    private byte[] GeneratePdf(AdminModel user, List<QuestionModel> questions)
    {
        using (var memoryStream = new MemoryStream())
        {
            if (Capabilities.Build.IsCoreBuild)
                PdfSharp.Fonts.GlobalFontSettings.FontResolver = new PdfSharp.Snippets.Font.FailsafeFontResolver();

            PdfDocument document = new PdfDocument();
            document.Info.Title = "React Native Quiz";

            PdfPage page = document.AddPage();
            XGraphics gfx = XGraphics.FromPdfPage(page);

            var width = page.Width;
            var height = page.Height;

             var content = "React Native Quiz";
             var userInfo = $"Email: {user.Email}";
             var score = $"Score: {questions.Count(q => q.SelectedAnswer == q.CorrectAnswer)}/{questions.Count}";
             var result = questions.Count(q => q.SelectedAnswer == q.CorrectAnswer) >= 7 ? "Pass" : "Fail";
             var resultColor = questions.Count(q => q.SelectedAnswer == q.CorrectAnswer) >= 7 ? "green" : "red";

            XFont titleFont = new XFont("Times New Roman", 20, XFontStyleEx.BoldItalic);
            XFont questionFont = new XFont("Times New Roman", 14, XFontStyleEx.Bold);
            XFont optionFont = new XFont("Times New Roman", 12, XFontStyleEx.Regular);
            XFont answerFont = new XFont("Times New Roman", 12, XFontStyleEx.Italic);
            XFont resultFont = new XFont("Times New Roman", 16, XFontStyleEx.Bold);

            

            gfx.DrawString(content, titleFont, XBrushes.Black, new XRect(0, 0, page.Width, page.Height), XStringFormats.TopCenter);
            gfx.DrawString(userInfo, questionFont, XBrushes.Black, new XRect(0, 20, page.Width, page.Height), XStringFormats.TopCenter);
            gfx.DrawString(score, questionFont, XBrushes.Black, new XRect(0, 40, page.Width, page.Height), XStringFormats.TopCenter);

            double yPoint = 80;
            double lineHeight = 20;

             if (yPoint + lineHeight > height - 40)
            {
                page = document.AddPage();
                gfx = XGraphics.FromPdfPage(page);
                yPoint = 40;
            }

             foreach (var question in questions)
            {
                gfx.DrawString(question.QuestionText, questionFont, XBrushes.Black, new XRect(40, yPoint, page.Width - 80, page.Height), XStringFormats.TopLeft);
                yPoint += 20;

                foreach (var option in question.Options)
                {
                    if (yPoint + lineHeight > height - 40)
                    {
                        page = document.AddPage();
                        gfx = XGraphics.FromPdfPage(page);
                        yPoint = 40;
                    }
                    gfx.DrawString(option, optionFont, XBrushes.Black, new XRect(60, yPoint, page.Width - 80, page.Height), XStringFormats.TopLeft);
                    yPoint += 20;
                }

                if (yPoint + lineHeight > height - 40)
                {
                    page = document.AddPage();
                    gfx = XGraphics.FromPdfPage(page);
                    yPoint = 40;
                }

                gfx.DrawString($"Correct Answer: {question.CorrectAnswer}", answerFont, XBrushes.Black, new XRect(40, yPoint, page.Width - 80, page.Height), XStringFormats.TopLeft);
                //yPoint += 30;
                yPoint += lineHeight + 10;
            }

            XColor color = XColor.FromName(resultColor); // Assuming resultColor is a valid color name
            XBrush brush = new XSolidBrush(color);
            gfx.DrawString($"Result: {result}", resultFont, brush, new XRect(0, 60, page.Width, page.Height), XStringFormats.TopCenter);
          
             document.Save(memoryStream);
            return memoryStream.ToArray();
        }
    }

     private async Task GeneratePDF_File()
    {
        try
        {

            var pdfBytes = GeneratePdf(user, Questions);
            var fileName = "output.pdf";
            var base64 = Convert.ToBase64String(pdfBytes);
            await JSRuntime.InvokeVoidAsync("saveAsFile", fileName, base64);

            @* var pdf = GeneratePdf("Sample Title", "This is sample content for the PDF.");
            var base64 = Convert.ToBase64String(pdf);
            var url = $"data:application/pdf;base64,{base64}";
            await JSRuntime.InvokeVoidAsync("open", url, "_blank"); *@
        }
        catch(Exception ex) 
        {
            Console.WriteLine(ex.StackTrace);
        }

    }
   
}
<style>
    .question {
    margin-bottom: 20px;
}
.heading {
    text-align: center;
    margin-bottom: 20px;
    font-size: 24px;
    font-weight: bold;
    color: #333;
}

.option {
    display: block;
    margin: 5px 0;
    padding: 10px;
    background-color: #f0f0f0;
    border: none;
    cursor: pointer;
}

.option:hover {
    background-color: #e0e0e0;
}

.feedback {
    font-weight: bold;
}
</style>
