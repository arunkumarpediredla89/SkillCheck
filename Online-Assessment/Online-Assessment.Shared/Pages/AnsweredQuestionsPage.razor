
@page "/AnsweredQuestionsPage"
@using static Online_Assessment.Shared.Pages.AssessmentPage
@inject NavigationManager NavigationManager
@inherits LayoutComponentBase

<h3 class="heading">Result-Admin</h3>
 <button class="addBtnClass" @onclick="download">Download</button>
<div class="user-info">
    <p><strong>User Name:</strong> John Doe</p>
    <p><strong>Email:</strong> john.doe@example.com</p>
    <p><strong>Score:</strong> 7/10</p>
</div>


<div class="questions-container">
    @foreach (var question in Questions)
    {
        <div class="question">
            <div class="question-text">
                <h4>Question @($"{Questions.IndexOf(question) + 1} of {Questions.Count}")</h4>
                <p>@question.QuestionText</p>
            </div>
            <div class="options">
                @foreach (var option in question.Options)
                {
                    <div class="option @(question.SelectedAnswer == option ? (question.SelectedAnswer == question.CorrectAnswer ? "correct" : "wrong") : (question.CorrectAnswer == option ? "correct" : ""))">
                        <label>
                            <input type="radio" name="option-@Questions.IndexOf(question)" value="@option" disabled="true" checked="@(question.SelectedAnswer == option)" />
                            @option
                        </label>
                    </div>
                }
            </div>
            <div class="feedback">
                @if (string.IsNullOrEmpty(question.SelectedAnswer))
                {
                    <span class="wrong">Not Attempted!</span>
                }
                else if (question.SelectedAnswer == question.CorrectAnswer)
                {
                    <span class="correct">Correct!</span>
                }
                else
                {
                    <span class="wrong">Wrong!</span>
                }
            </div>
        </div>
    }
</div>

<style>
    .correct {
        color: green;
    }

    .wrong {
        color: red;
    }
</style>

<style>
    .user-info {
        max-width: 800px;
        margin: 0 auto 20px;
        padding: 20px;
        background-color: #f9f9f9;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        text-align: center;
    }

    .user-info p {
        margin: 10px 0;
        font-size: 18px;
    }

    .user-info strong {
        color: #333;
    }
</style>

<style>
    .questions-container {
        max-width: 800px;
        margin: 0 auto;
        padding: 20px;
        background-color: #f9f9f9;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    .question {
        margin-bottom: 20px;
        padding: 15px;
        background-color: #fff;
        border-radius: 8px;
        box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);
    }

    .question-text {
        font-size: 18px;
        font-weight: bold;
        margin-bottom: 10px;
    }

    .options {
        margin-bottom: 10px;
    }

    .option {
        display: block;
        width: 100%;
        margin: 5px 0;
        padding: 10px;
        background-color: #f0f0f0;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        text-align: left;
    }

    .option:hover {
        background-color: #e0e0e0;
    }

    .feedback {
        font-weight: bold;
        margin-top: 10px;
    }

    .addBtnClass
    {
        justify-content: right;
        display: flex;
    }
</style>

@code {
    private int CurrentQuestionIndex = 0;
    private bool IsLastQuestion => CurrentQuestionIndex == Questions.Count - 1;
    private bool IsFistQuestion => CurrentQuestionIndex == 0;
    private QuestionModel? CurrentQuestion => Questions[CurrentQuestionIndex];
    private List<QuestionModel> Questions = new()
    {
        new QuestionModel { QuestionText = "What is React Native?", Options = new List<string> { "A web framework", "A mobile app library", "A desktop tool", "A VCS" }, CorrectAnswer = "A mobile app library" },
        new QuestionModel { QuestionText = "Which language is used in React Native?", Options = new List<string> { "JavaScript", "Python", "Java", "Swift" }, CorrectAnswer = "JavaScript" },
        new QuestionModel { QuestionText = "Which core component creates a container?", Options = new List<string> { "View", "Container", "Div", "Frame" }, CorrectAnswer = "View" },
        new QuestionModel { QuestionText = "Which is NOT a valid React Native component?", Options = new List<string> { "Text", "Button", "Image", "Link" }, CorrectAnswer = "Link" },
        new QuestionModel { QuestionText = "Which component is used to render scrollable content?", Options = new List<string> { "FlatList", "ScrollView", "SectionList", "Text" }, CorrectAnswer = "ScrollView" },
        new QuestionModel { QuestionText = "Which file is the entry point?", Options = new List<string> { "App.js", "Index.js", "Main.js", "App.json" }, CorrectAnswer = "Index.js" },
        new QuestionModel { QuestionText = "Command to run a React Native app on Android?", Options = new List<string> { "react-native run-android", "react-native run-ios", "npm start", "npx react-native run-android" }, CorrectAnswer = "npx react-native run-android" },
        new QuestionModel { QuestionText = "Command to run React Native app in dev mode?", Options = new List<string> { "react-native run-android", "react-native run-ios", "npm start", "npx react-native run-ios" }, CorrectAnswer = "react-native run-android" },
        new QuestionModel { QuestionText = "Command to create a new React Native project?", Options = new List<string> { "react-native init", "npx create-react-native-app", "npm init react-native", "npx react-native init" }, CorrectAnswer = "npx react-native init" },
        new QuestionModel { QuestionText = "Command to install React Native CLI globally?", Options = new List<string> { "npm install -g react-native-cli", "npm install -g create-react-native-app", "npm install -g react-native", "npm install -g npx" }, CorrectAnswer = "npm install -g react-native-cli" }
    };

    private void CheckAnswer(QuestionModel question, string selectedOption)
    {
        question.SelectedAnswer = selectedOption;
    }

    // Sample correct and wrong answers for testing
    protected override void OnInitialized()
    {
        Questions[0].SelectedAnswer = "A mobile app library"; // Correct
        Questions[1].SelectedAnswer = "Python"; // Wrong
        Questions[2].SelectedAnswer = "View"; // Correct
        Questions[3].SelectedAnswer = "Link"; // Wrong
        Questions[4].SelectedAnswer = "ScrollView"; // Correct
    }

    private void download()
    {
        
    }
}
<style>
    .question {
    margin-bottom: 20px;
}
.heading {
    text-align: center;
    margin-bottom: 20px;
    font-size: 24px;
    font-weight: bold;
    color: #333;
}

.option {
    display: block;
    margin: 5px 0;
    padding: 10px;
    background-color: #f0f0f0;
    border: none;
    cursor: pointer;
}

.option:hover {
    background-color: #e0e0e0;
}

.feedback {
    font-weight: bold;
}
</style>
