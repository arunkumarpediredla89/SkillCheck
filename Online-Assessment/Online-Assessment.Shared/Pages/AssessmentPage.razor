@page "/assessmentPage"

@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@using System.Collections.Generic
@inject IJSRuntime JSRuntime


<PageTitle>React Native Assessment</PageTitle>

<!-- Exam Header -->
<div class="exam-header">
    <h1 class="exam-title">React Native Assessment</h1>
    <span class="time-left"><strong>Time Left : </strong> <span id="timer">30:00</span></span>
</div>

<!-- Question Section -->
<div class="question-container">
    <h2 class="question-number">Question @($"{CurrentQuestionIndex + 1} of {Questions.Count}")</h2>
    <p class="question-text">@CurrentQuestion.QuestionText</p>

    <!-- Options -->
    <div class="options">
        @foreach (var option in CurrentQuestion.Options)
        {
            <label class="option-label">
                <input type="radio" name="option" value="@option"
                       checked="@(SelectedOption == option)"
                       @onchange="(() => SelectOption(option))" />
                @option
            </label>
        }
    </div>
</div>

<!-- Navigation Buttons -->
<div class="navigation">
    @if (!IsLastQuestion)
    {
        <button @onclick="NextQuestion" class="btn btn-primary">Next</button>
    }
    else
    {
        <button @onclick="SubmitExam" class="btn btn-success">Submit</button>
    }
</div>

<style>
    .exam-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
        text-align: center;
        width: 100%;
    }

    .exam-title {
        flex-grow: 1;
        text-align: center;
        color: #0070AD;
        font-size: 24px;
        font-weight: bold;
    }


    .time-left {
        font-size: 18px;
        background: #e0f7fa;
        padding: 8px 15px;
        border-radius: 5px;
        position: absolute;
        right: 20px;
    }

    .question-container {
        margin-left: 40px; /* Move question & options slightly to the right */
    }

    .question-number {
        font-size: 18px;
        font-weight: bold;
        margin-top: 30px;
        margin-bottom: 30px;
    }

    .question-text {
        font-size: 16px;
        margin-top: 30px;
        margin-bottom: 30px;
    }

    .options {
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    .option-label {
        display: flex;
        align-items: center;
        gap: 10px;
        padding: 10px 15px;
        margin: 5px 0;
        background: #d6eaf8; /* Light Blue Background */
        border-radius: 5px;
        cursor: pointer;
        width: fit-content; /* Ensures the background only covers the option's text width */
        transition: background-color 0.3s ease;
    }

    input[type="radio"] {
        margin-right: 10px; /* Space between radio button and label */
    }

        .option-label:hover {
            background: #aed6f1; /* Darker Blue on Hover */
        }

    .navigation {
        display: flex;
        justify-content: center;
        margin-top: 20px;
    }

    .btn {
        padding: 8px 12px;
        font-size: 14px;
        border-radius: 5px;
        width: 150px; /* Set width of the button to 200px */
    }
</style>

@code {
    private string TimeRemaining = DateTime.Now.AddSeconds(20).ToString("HH:mm:ss");
    private List<QuestionModel> Questions = new()
    {
        new QuestionModel { QuestionText = "What is React Native?", Options = new List<string> { "A web framework", "A mobile app library", "A desktop tool", "A VCS" }, CorrectAnswer = "A mobile app library" },
        new QuestionModel { QuestionText = "Which language is used in React Native?", Options = new List<string> { "JavaScript", "Python", "Java", "Swift" }, CorrectAnswer = "JavaScript" },
        new QuestionModel { QuestionText = "Which core component creates a container?", Options = new List<string> { "View", "Container", "Div", "Frame" }, CorrectAnswer = "View" },
        new QuestionModel { QuestionText = "Which is NOT a valid React Native component?", Options = new List<string> { "Text", "Button", "Image", "Link" }, CorrectAnswer = "Link" },
        new QuestionModel { QuestionText = "Which component is used to render scrollable content?", Options = new List<string> { "FlatList", "ScrollView", "SectionList", "Text" }, CorrectAnswer = "ScrollView" },
        new QuestionModel { QuestionText = "Which file is the entry point?", Options = new List<string> { "App.js", "Index.js", "Main.js", "App.json" }, CorrectAnswer = "Index.js" },
        new QuestionModel { QuestionText = "Command to run a React Native app on Android?", Options = new List<string> { "react-native run-android", "react-native run-ios", "npm start", "npx react-native run-android" }, CorrectAnswer = "npx react-native run-android" },
        new QuestionModel { QuestionText = "Command to run React Native app in dev mode?", Options = new List<string> { "react-native run-android", "react-native run-ios", "npm start", "npx react-native run-ios" }, CorrectAnswer = "react-native run-android" },
        new QuestionModel { QuestionText = "Command to create a new React Native project?", Options = new List<string> { "react-native init", "npx create-react-native-app", "npm init react-native", "npx react-native init" }, CorrectAnswer = "npx react-native init" },
        new QuestionModel { QuestionText = "Command to install React Native CLI globally?", Options = new List<string> { "npm install -g react-native-cli", "npm install -g create-react-native-app", "npm install -g react-native", "npm install -g npx" }, CorrectAnswer = "npm install -g react-native-cli" }
    };

    private int CurrentQuestionIndex = 0;
    private string SelectedOption = "";

    private bool IsLastQuestion => CurrentQuestionIndex == Questions.Count - 1;

    private QuestionModel CurrentQuestion => Questions[CurrentQuestionIndex];

    private void SelectOption(string option)
    {
        SelectedOption = option;
        CurrentQuestion.SelectedAnswer = option;
    }

    private void NextQuestion()
    {
        if (!IsLastQuestion)
        {
            CurrentQuestionIndex++;
            SelectedOption = CurrentQuestion.SelectedAnswer;
        }
    }

    private int totalSeconds = 30 * 60; // 30 minutes in seconds

    // OnInitialized to trigger the timer when component is loaded
    protected override async Task OnInitializedAsync()
    {
        // Call the JavaScript function to start the timer with the total time in seconds
        await JSRuntime.InvokeVoidAsync("startTimer", totalSeconds, 1000); // 1000 ms interval (1 second)
    }

    private void SubmitExam()
    {
        // Exam submission logic
    }

    public class QuestionModel
    {
        public string QuestionText { get; set; }
        public List<string> Options { get; set; }
        public string CorrectAnswer { get; set; }
        public string SelectedAnswer { get; set; }
    }
}


