@page "/assessmentPage"
@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@using System.Collections.Generic

<PageTitle>Online Exam</PageTitle>

<div class="centered-grid">
    <!-- Exam Header -->
    <div class="centered-grid">
        <!-- Header Section -->
        <div class="vertical-stack-layout" style="margin-top: 50px">
            <label class="assessment-header" style="color:#0070AD;">
                Online Exam
            </label>
        </div>


        <div class="exam-info">
            <span>Subject: @SubjectName</span>
            <span>Time Remaining: @TimeRemaining</span>
        </div>
    </div>

    <!-- Question Section -->
    <div class="question-section">
        <h2>@($"Question {CurrentQuestionIndex + 1} of {Questions.Count}")</h2>
        <p>@CurrentQuestion.QuestionText</p>

        <!-- Options -->
        <div class="options">
            @foreach (var option in CurrentQuestion.Options)
            {
                <label>
                    <input type="radio" name="option" value="@option"
                           checked="@(SelectedOption == option)"
                           @onchange="(() => SelectOption(option))" />
                    @option
                </label>
            }
        </div>
    </div>

    <!-- Navigation Buttons -->
    <div class="navigation">
        @* <button @onclick="PreviousQuestion" class="btn btn-info" disabled="@IsFirstQuestion">Previous</button>
        <button @onclick="NextQuestion" class="btn btn-info" disabled="@IsLastQuestion">Next</button> *@
        <button @onclick="SubmitExam" class="submit-button" disabled="@CanSubmit">Submit</button>
    </div>
</div>

@code {
    private string SubjectName = "React Native";
    private string TimeRemaining = DateTime.Now.AddSeconds(20).ToString("HH:mm:ss");
    private List<QuestionModel> Questions = new()
    {
        new QuestionModel
        {
            QuestionText = "What is React Native?",
            Options = new List<string> { "A web framework for building websites", "A library for building cross-platform mobile apps using JavaScript", "A tool for creating native desktop applications", "A version control system" },
            CorrectAnswer = "A library for building cross-platform mobile apps using JavaScript"
        },
        new QuestionModel
        {
            QuestionText = "Which language is primarily used in React Native?",
            Options = new List<string> { "JavaScript", "Python", "Java", "Swift" },
            CorrectAnswer = "JavaScript"
        },
        new QuestionModel
        {
            QuestionText = "Which core component is used to create a container in React Native?",
            Options = new List<string> { "View", "Container", "Div", "Frame" },
            CorrectAnswer = "View"
        },
        new QuestionModel
        {
            QuestionText = "Which of the following is not a valid React Native component?",
            Options = new List<string> { "Text", "Button", "Image", "Link" },
            CorrectAnswer = "Link"
        },
        new QuestionModel
        {
            QuestionText = "Which component is used to render scrollable content?",
            Options = new List<string> { "FlatList", "ScrollView", "SectionList", "Text" },
            CorrectAnswer = "ScrollView"
        },
        new QuestionModel
        {
            QuestionText = "Which file is the entry point for a React Native application?",
            Options = new List<string> { "App.js", "Index.js", "Main.js", "App.json" },
            CorrectAnswer = "Index.js"
        },
        new QuestionModel
        {
            QuestionText = "Which command is used to run a React Native application on an Android emulator?",
            Options = new List<string> { "react-native run-android", "react-native run-ios", "npm start", "npx react-native run-android" },
            CorrectAnswer = "npx react-native run-android"
        },
        new QuestionModel
        {
            QuestionText = "Which command runs a React Native app in development mode?",
            Options = new List<string> { "react-native run-android", "react-native run-ios", "npm start", "npx react-native run-ios" },
            CorrectAnswer = "react-native run-android"
        },
        new QuestionModel
        {
            QuestionText = "Which command is used to create a new React Native project?",
            Options = new List<string> { "react-native init", "npx create-react-native-app", "npm init react-native", "npx react-native init" },
            CorrectAnswer = "npx react-native init"
        },
        new QuestionModel
        {
            QuestionText = "Which command is used to install the React Native CLI globally?",
            Options = new List<string> { "npm install -g react-native-cli", "npm install -g create-react-native-app", "npm install -g react-native", "npm install -g npx" },
            CorrectAnswer = "npm install -g react-native-cli"
        }
    };

    private int CurrentQuestionIndex = 0;
    private string SelectedOption = "";

    private bool IsFirstQuestion => CurrentQuestionIndex == 0;
    private bool IsLastQuestion => CurrentQuestionIndex == Questions.Count - 1;
    private bool CanSubmit => Questions.All(q => !string.IsNullOrEmpty(q.SelectedAnswer));

    private QuestionModel CurrentQuestion => Questions[CurrentQuestionIndex];

    private void SelectOption(string option)
    {
        SelectedOption = option;
        CurrentQuestion.SelectedAnswer = option;
    }

    private void PreviousQuestion()
    {
        if (!IsFirstQuestion)
        {
            CurrentQuestionIndex--;
            SelectedOption = CurrentQuestion.SelectedAnswer;
        }
    }

    private void NextQuestion()
    {
        if (!IsLastQuestion)
        {
            CurrentQuestionIndex++;
            SelectedOption = CurrentQuestion.SelectedAnswer;
        }
    }

    private void SubmitExam()
    {
        if (!IsLastQuestion)
        {
            CurrentQuestionIndex++;
            SelectedOption = CurrentQuestion.SelectedAnswer;
        }
    }

    public class QuestionModel
    {
        public string QuestionText { get; set; }
        public List<string> Options { get; set; }
        public string CorrectAnswer { get; set; }
        public string SelectedAnswer { get; set; }
    }
}

