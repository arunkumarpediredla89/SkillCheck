@page "/assessmentPage"

@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@using System.Timers

<PageTitle>React Native Assessment</PageTitle>

<!-- Exam Header -->
@if (!IsAssessmentCompleted)
{
    <div class="exam-header">
        <h1 class="exam-title">React Native Assessment</h1>
        <span class="time-left"><strong>Time Left: </strong> <span id="timer">@($"{TimeRemaining}s")</span></span>
    </div>
}

<!-- Question Section -->
@if (!IsAssessmentCompleted)
{
    <div class="question-container">
        <h2 class="question-number">Question @($"{CurrentQuestionIndex + 1} of {Questions.Count}")</h2>
        <p class="question-text">@CurrentQuestion.QuestionText</p>

        <!-- Options -->
        <div class="options">
            @foreach (var option in CurrentQuestion.Options)
            {
                <label class="option-label">
                    <input type="radio" name="option" value="@option"
                           checked="@(SelectedOption == option)"
                           @onchange="(() => SelectOption(option))" />
                    @option
                </label>
            }
        </div>
    </div>

    <!-- Navigation Buttons -->
    <div class="navigation">
        @if (!IsLastQuestion)
        {
            <button @onclick="NextQuestion" class="btn btn-primary">Next</button>
        }
        else
        {
            <button @onclick="SubmitExam" class="btn btn-success">Submit</button>
        }
    </div>
}
else
{
    <!-- Completion Message -->
    <div class="completion-message">
        <h2>You have completed the assessment.</h2>
        <p>Thank you for your participation!</p>
    </div>
}

<style>
    .exam-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
        text-align: center;
        width: 100%;
    }

    .exam-title {
        flex-grow: 1;
        text-align: center;
        color: #0070AD;
        font-size: 24px;
        font-weight: bold;
    }

    .time-left {
        font-size: 18px;
        background: #e0f7fa;
        padding: 8px 15px;
        border-radius: 5px;
        position: absolute;
        right: 20px;
    }

    .question-container {
        margin-left: 40px;
    }

    .question-number {
        font-size: 18px;
        font-weight: bold;
        margin-top: 30px;
        margin-bottom: 30px;
    }

    .question-text {
        font-size: 16px;
        margin-top: 30px;
        margin-bottom: 30px;
    }

    .options {
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    .option-label {
        display: flex;
        align-items: center;
        gap: 10px;
        padding: 10px 15px;
        margin: 5px 0;
        background: #d6eaf8;
        border-radius: 5px;
        cursor: pointer;
        width: fit-content;
        transition: background-color 0.3s ease;
    }

    .option-label:hover {
        background: #aed6f1;
    }

    .navigation {
        display: flex;
        justify-content: center;
        margin-top: 20px;
    }

    .btn {
        padding: 8px 12px;
        font-size: 14px;
        border-radius: 5px;
        width: 150px;
    }

    .completion-message {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        text-align: center;
        height: 100vh;
    }
</style>

@code {
    private bool IsAssessmentCompleted = false;
    private int TimeRemaining = 20; // 20 seconds per question
    private Timer questionTimer;
    private List<QuestionModel> Questions = new()
    {
        new QuestionModel { QuestionText = "What is React Native?", Options = new List<string> { "A web framework", "A mobile app library", "A desktop tool", "A VCS" }, CorrectAnswer = "A mobile app library" },
        new QuestionModel { QuestionText = "Which language is used in React Native?", Options = new List<string> { "JavaScript", "Python", "Java", "Swift" }, CorrectAnswer = "JavaScript" },
        new QuestionModel { QuestionText = "Which core component creates a container?", Options = new List<string> { "View", "Container", "Div", "Frame" }, CorrectAnswer = "View" },
        new QuestionModel { QuestionText = "Which is NOT a valid React Native component?", Options = new List<string> { "Text", "Button", "Image", "Link" }, CorrectAnswer = "Link" },
        new QuestionModel { QuestionText = "Which component is used to render scrollable content?", Options = new List<string> { "FlatList", "ScrollView", "SectionList", "Text" }, CorrectAnswer = "ScrollView" },
        new QuestionModel { QuestionText = "Which file is the entry point?", Options = new List<string> { "App.js", "Index.js", "Main.js", "App.json" }, CorrectAnswer = "Index.js" },
        new QuestionModel { QuestionText = "Command to run a React Native app on Android?", Options = new List<string> { "react-native run-android", "react-native run-ios", "npm start", "npx react-native run-android" }, CorrectAnswer = "npx react-native run-android" },
        new QuestionModel { QuestionText = "Command to run React Native app in dev mode?", Options = new List<string> { "react-native run-android", "react-native run-ios", "npm start", "npx react-native run-ios" }, CorrectAnswer = "react-native run-android" },
        new QuestionModel { QuestionText = "Command to create a new React Native project?", Options = new List<string> { "react-native init", "npx create-react-native-app", "npm init react-native", "npx react-native init" }, CorrectAnswer = "npx react-native init" },
        new QuestionModel { QuestionText = "Command to install React Native CLI globally?", Options = new List<string> { "npm install -g react-native-cli", "npm install -g create-react-native-app", "npm install -g react-native", "npm install -g npx" }, CorrectAnswer = "npm install -g react-native-cli" }    
    };

    private int CurrentQuestionIndex = 0;
    private string SelectedOption = "";

    private bool IsLastQuestion => CurrentQuestionIndex == Questions.Count - 1;
    private QuestionModel CurrentQuestion => Questions[CurrentQuestionIndex];

    private string DisableBackAndRefreshJS = @"
        window.onbeforeunload = function() {
            return 'Are you sure you want to leave? Your progress will be lost.';
        };
        history.pushState(null, '', location.href);
        window.onpopstate = function() {
            history.pushState(null, '', location.href);
        };
    ";

    protected override async Task OnInitializedAsync()
    {
        StartTimer();
        await JSRuntime.InvokeVoidAsync("eval", DisableBackAndRefreshJS);
    }

    private void StartTimer()
    {
        questionTimer?.Dispose();
        TimeRemaining = 20;
        questionTimer = new Timer(1000);
        questionTimer.Elapsed += TimerElapsed;
        questionTimer.Start();
    }

    private async void TimerElapsed(object sender, ElapsedEventArgs e)
    {
        if (TimeRemaining > 0)
        {
            TimeRemaining--;
            await InvokeAsync(StateHasChanged);
        }
        else
        {
            await InvokeAsync(() =>
            {
                NextQuestion();
                StartTimer();
            });
        }
    }

    private void SelectOption(string option)
    {
        SelectedOption = option;
        Questions[CurrentQuestionIndex].SelectedAnswer = option;
        StateHasChanged();
    }

    private void NextQuestion()
    {
        if (!IsLastQuestion)
        {
            CurrentQuestionIndex++;
            SelectedOption = "";
            StateHasChanged();
            StartTimer();
        }
        else
        {
            SubmitExam();
        }
    }

    private async void SubmitExam()
    {
        questionTimer?.Dispose();
        IsAssessmentCompleted = true;
        var EnableNavigationJS = @"
            window.onbeforeunload = null;
            window.onpopstate = null;
        ";
        await JSRuntime.InvokeVoidAsync("eval", EnableNavigationJS);
    }

    public class QuestionModel
    {
        public string QuestionText { get; set; }
        public List<string> Options { get; set; }
        public string CorrectAnswer { get; set; }
        public string SelectedAnswer { get; set; }
    }
}
