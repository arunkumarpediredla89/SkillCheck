@inherits LayoutComponentBase
@inject NavigationManager Navigation

<div class="page">
    <main>

        <div class="scroll-view">
            <div class="centered-grid">

                <!-- Header Section -->
                <div class="vertical-stack-layout" style="margin-top: 50px">
                    <label class="assessment-header" style="color:#0070AD;">
                        Online Assessment
                    </label>
                </div>

                <!-- Button Section -->
                <div class="vertical-stack-layout text-center" style="margin-top: 50px; margin-bottom: 0px">

                    <div class="text-center">
                        <select class="form-select custom-dropdown" aria-label="Candidate options" @onchange="HandleSelectionChange" style="background-color: #17ABDA; color: white; margin-top: -20px;">
                            <option value="candidate" style="background-color: #ffffff; color: black;">Candidate</option>
                            <option value="internal" style="background-color: #ffffff; color: black;">Internal Users</option>
                            <option value="admin" style="background-color: #ffffff; color: black;">Admin</option>
                        </select>
                    </div>

                    <style>
                        /* Custom dropdown arrow styling */
                        .custom-dropdown {
                            appearance: none;
                            -webkit-appearance: none; /* For Safari */
                            -moz-appearance: none; /* For Firefox */
                            background-color: #17ABDA;
                            color: white;
                            padding-right: 20px; /* Extra space to make room for the arrow */
                            background-image: url('data:image/svg+xml,%3Csvg xmlns=%22http://www.w3.org/2000/svg%22 width=%2210%22 height=%2210%22 viewBox=%220 0 10 10%22%3E%3Cpolygon fill=%22white%22 points=%225,10 10,5 0,5%22 /%3E%3C/svg%3E');
                            background-repeat: no-repeat;
                            background-position: right 15px top 10px;/* Position the arrow */
                        }

                            /* Optional: Remove default focus ring on select */
                            .custom-dropdown:focus {
                                outline: none;
                                box-shadow: none;
                            }
                    </style>

                    <!-- Input Fields (Username & Password) -->
                    <div class="grid" style="display: grid; grid-template-columns: 1fr 200px; gap: 20px; margin-top: 100px;">
                        <div class="label" style="color: #707070; display: flex; align-items: center; justify-content: flex-end;">Username</div>
                        <div><input type="text" class="form-control" /></div>

                        <div class="label" style="color: #707070; display: flex; align-items: center; justify-content: flex-end;">Password</div>
                        <div><input type="password" class="form-control" /></div>
                    </div>

                    <!-- Login Button -->
                    <button class="btn btn-light" style="background-color: #e0e0e0; color: #0070ad; font-size: 20px; font-weight: bold; width: 150px; margin-top: 70px;" @onclick="LoginButton_Clicked">Login</button>
                </div>
            </div>
        </div>

        @code {

            private string ExternalbuttonClass = "btn btn-primary";
            private string InternalbuttonClass = "btn btn-info";
            private string LoginbuttonClass = "btn btn-light";

            private void ExternalUsers_Clicked(MouseEventArgs e)
            {
                ExternalbuttonClass = "btn btn-primary active";  // Add 'active' class to highlight it
                InternalbuttonClass = "btn btn-info";
            }

            private void InternalUsers_Clicked(MouseEventArgs e)
            {
                // Set the selected button to 'active' or change its class
                InternalbuttonClass = "btn btn-info active";  // Add 'active' class to highlight it
                ExternalbuttonClass = "btn btn-primary";
            }

            private void AdminUser_Clicked(MouseEventArgs e)
            {
                // Set the selected button to 'active' or change its class
                InternalbuttonClass = "btn btn-info active";  // Add 'active' class to highlight it
                ExternalbuttonClass = "btn btn-primary";
            }

            private void LoginButton_Clicked(MouseEventArgs e)
            {
                // Add your logic to validate login here (if needed)

                // Validate login (example)
                bool isValid = true; // Example condition, replace with actual validation logic

                if (isValid)
                {
                    // After login logic, navigate to the desired page
                    Navigation.NavigateTo("/counter");
                }
                else
                {
                    // Handle invalid login case (e.g., show error message)
                }
            }

            // This will store the selected option
            private string selectedOption = "candidate"; // Default value

            // This method will be triggered when selection changes
            private void HandleSelectionChange()
            {
                if (selectedOption == "candidate")
                {
                    // Handle Internal Users selection
                    Console.WriteLine("Candidate Users selected");
                }
                if (selectedOption == "internal")
                {
                    // Handle Internal Users selection
                    Console.WriteLine("Internal Users selected");
                }
                else if (selectedOption == "admin")
                {
                    // Handle Admin selection
                    Console.WriteLine("Admin selected");
                }
            }
        }
    </main>
</div>
